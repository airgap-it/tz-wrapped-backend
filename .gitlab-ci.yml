image: docker:latest
variables:
  GIT_SUBMODULE_STRATEGY: recursive
  GOOGLE_TAG: eu.gcr.io/papers-kubernetes/tz-wrapped-backend:$CI_COMMIT_SHA
  TEST_TAG: tz_wrapped_backend_test_$CI_COMMIT_SHA
  GOOGLE_TAG_LATEST: eu.gcr.io/papers-kubernetes/tz-wrapped-backend:latest

stages:
  - build
  - test
  - build_serve
  - publish
  - deploy
  - provision
  - drop_db

build:
  stage: build
  script:
    - docker build --target build -t $GOOGLE_TAG .
  tags:
    - docker

test:
  allow_failure: false
  stage: test
  script:
    - docker run --name unit-$CI_COMMIT_SHA $GOOGLE_TAG cargo test
  after_script:
    - docker rm -f unit-$CI_COMMIT_SHA || true
  tags:
    - docker

publish:
  stage: publish
  image: google/cloud-sdk
  before_script:
    - echo $GCLOUD_GOOGLE_KEY > key.json
    - gcloud auth activate-service-account $GCLOUD_ACCOUNT --key-file key.json
    - gcloud config set account $GCLOUD_ACCOUNT
    - gcloud config set compute/zone $GCLOUD_ZONE
    - gcloud config set project $GCLOUD_PROJECT
    - gcloud auth configure-docker
  script:
    - docker tag $GOOGLE_TAG $GOOGLE_TAG_LATEST
    - docker push $GOOGLE_TAG
    - docker push $GOOGLE_TAG_LATEST
  only:
    - master
    - develop
  tags:
    - docker

k8s-deploy-development:
  stage: deploy
  when: manual
  image: google/cloud-sdk
  before_script:
    - echo $GCLOUD_GOOGLE_KEY > key.json
    - gcloud auth activate-service-account $GCLOUD_ACCOUNT --key-file key.json
    - gcloud config set account $GCLOUD_ACCOUNT
    - gcloud config set project $GCLOUD_PROJECT
    - gcloud config set compute/zone $GCLOUD_ZONE_DEVELOPMENT
    - gcloud container clusters get-credentials papers-cluster-development
  script:
    - find k8s -type f -name \*.yaml -exec sed -i "s|__TO_BE_REPLACED_BY_IMAGE_TAG__|"$GOOGLE_TAG"|g" {} +
    - find k8s -type f -name \*.yaml -exec sed -i "s|__DB_USER__|"$DB_USER_DEVELOPMENT"|g" {} +
    - find k8s -type f -name \*.yaml -exec sed -i "s|__DB_PASSWORD__|"$DB_PASSWORD_DEVELOPMENT"|g" {} +
    - find k8s -type f -name \*.yaml -exec sed -i "s|__DB_NAME_DEVELOPMENT__|"$DB_NAME_DEVELOPMENT"|g" {} +
    - find k8s -type f -name \*.yaml -exec sed -i "s|__DB_HOST_DEVELOPMENT__|"$DB_HOST_DEVELOPMENT"|g" {} +
    - find k8s -type f -name \*.yaml -exec sed -i "s|__SMTP_HOST__|"$SMTP_HOST"|g" {} +
    - find k8s -type f -name \*.yaml -exec sed -i "s|__SMTP_USER__|"$SMTP_USER"|g" {} +
    - find k8s -type f -name \*.yaml -exec sed -i "s|__SMTP_PASSWORD__|"$SMTP_PASS"|g" {} +
    - kubectl apply -f k8s/tz-wrapped/common/namespace.yaml
    - kubectl apply -f k8s/tz-wrapped/development/ --recursive
    - kubectl apply -f k8s/tz-wrapped/common/ --recursive
  only:
    - develop
    - master
  tags:
    - docker

k8s-deploy-production:
  stage: deploy
  when: manual
  image: google/cloud-sdk
  before_script:
    - echo $GCLOUD_GOOGLE_KEY > key.json
    - gcloud auth activate-service-account $GCLOUD_ACCOUNT --key-file key.json
    - gcloud config set account $GCLOUD_ACCOUNT
    - gcloud config set project $GCLOUD_PROJECT
    - gcloud config set compute/zone $GCLOUD_ZONE
    - gcloud container clusters get-credentials papers-cluster-production
  script:
    - find k8s -type f -name \*.yaml -exec sed -i "s|__TO_BE_REPLACED_BY_IMAGE_TAG__|"$GOOGLE_TAG"|g" {} +
    - find k8s -type f -name \*.yaml -exec sed -i "s|__DB_USER__|"$DB_USER_PRODUCTION"|g" {} +
    - find k8s -type f -name \*.yaml -exec sed -i "s|__DB_PASSWORD__|"$DB_PASSWORD_PRODUCTION"|g" {} +
    - find k8s -type f -name \*.yaml -exec sed -i "s|__DB_NAME_PRODUCTION__|"$DB_NAME"|g" {} +
    - find k8s -type f -name \*.yaml -exec sed -i "s|__DB_HOST_PRODUCTION__|"$__DB_HOST_PRODUCTION__"|g" {} +
    - find k8s -type f -name \*.yaml -exec sed -i "s|__SMTP_HOST__|"$SMTP_HOST"|g" {} +
    - find k8s -type f -name \*.yaml -exec sed -i "s|__SMTP_USER__|"$SMTP_USER"|g" {} +
    - find k8s -type f -name \*.yaml -exec sed -i "s|__SMTP_PASSWORD__|"$SMTP_PASS"|g" {} +
    - kubectl apply -f k8s/tz-wrapped/common/namespace.yaml
    - kubectl apply -f k8s/tz-wrapped/production/ --recursive
    - kubectl apply -f k8s/tz-wrapped/common/ --recursive
  only:
    - master
  tags:
    - docker

provision-db-development:
  stage: provision
  only:
    - develop
    - master
  when: manual
  image: google/cloud-sdk
  before_script:
    - echo $GCLOUD_GOOGLE_KEY > key.json
    - gcloud auth activate-service-account $GCLOUD_ACCOUNT --key-file key.json
    - gcloud config set account $GCLOUD_ACCOUNT
    - gcloud config set project $GCLOUD_PROJECT
    - gcloud config set compute/zone $GCLOUD_ZONE_DEVELOPMENT
    - gcloud container clusters get-credentials papers-cluster-development
    - export STOLON_PROXY=$(kubectl get pods --all-namespaces | grep stolon-proxy | awk 'NR==1{print $2}')
  script:
    - kubectl exec -n development-postgresql $STOLON_PROXY -- bash -c "export PGPASSWORD=$PG_DEV_MASTER_PASSWORD && psql --host=localhost --username=$PG_DEV_MASTER_USERNAME postgres -c \"CREATE DATABASE $DB_NAME_DEVELOPMENT\""  || true
    - kubectl exec -n development-postgresql $STOLON_PROXY -- bash -c "export PGPASSWORD=$PG_DEV_MASTER_PASSWORD && psql --host=localhost --username=$PG_DEV_MASTER_USERNAME postgres -c \"CREATE USER $DB_USER_DEVELOPMENT WITH ENCRYPTED PASSWORD '$DB_PASSWORD_DEVELOPMENT'\"" || true
    - kubectl exec -n development-postgresql $STOLON_PROXY -- bash -c "export PGPASSWORD=$PG_DEV_MASTER_PASSWORD && psql --host=localhost --username=$PG_DEV_MASTER_USERNAME postgres -c \"GRANT ALL PRIVILEGES ON DATABASE $DB_NAME_DEVELOPMENT to $DB_USER_DEVELOPMENT\"" || true
    - kubectl exec -n development-postgresql $STOLON_PROXY -- bash -c "export PGPASSWORD=$PG_DEV_MASTER_PASSWORD && psql --host=localhost --username=$PG_DEV_MASTER_USERNAME --dbname=$DB_NAME_DEVELOPMENT postgres -c 'CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\"'" || true
  tags:
    - docker

drop-db-development:
  stage: drop_db
  only:
    - develop
    - master
  when: manual
  image: google/cloud-sdk
  before_script:
    - echo $GCLOUD_GOOGLE_KEY > key.json
    - gcloud auth activate-service-account $GCLOUD_ACCOUNT --key-file key.json
    - gcloud config set account $GCLOUD_ACCOUNT
    - gcloud config set project $GCLOUD_PROJECT
    - gcloud config set compute/zone $GCLOUD_ZONE_DEVELOPMENT
    - gcloud container clusters get-credentials papers-cluster-development
    - export STOLON_PROXY=$(kubectl get pods --all-namespaces | grep stolon-proxy | awk 'NR==1{print $2}')
  script:
    - kubectl exec -n development-postgresql $STOLON_PROXY -- bash -c "export PGPASSWORD=$PG_DEV_MASTER_PASSWORD && psql --host=localhost --username=$PG_DEV_MASTER_USERNAME postgres -c \"DROP DATABASE $DB_NAME_DEVELOPMENT\""  || true
  tags:
    - docker   
